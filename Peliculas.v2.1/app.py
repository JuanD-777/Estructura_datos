import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
from movie_recommender import MovieRecommender

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Recomendador de Pel√≠culas ML",
    page_icon="üé¨",
    layout="wide"
)

# Estilo personalizado
st.markdown("""
<style>
    .main {
        background-color: #0e1117;
        color: white;
    }
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    h1, h2, h3 {
        color: #ff4b4b;
    }
    .stButton>button {
        background-color: #ff4b4b;
        color: white;
    }
    .stSelectbox>div>div {
        background-color: #262730;
    }
</style>
""", unsafe_allow_html=True)

# Funci√≥n para encontrar la columna de rating
def find_rating_column(df):
    """Encuentra la columna de rating en el DataFrame"""
    possible_names = ['rating', 'vote_average', 'imdb_rating', 'score', 'user_rating', 'tmdb_rating']
    
    # Buscar nombres exactos
    for name in possible_names:
        if name in df.columns:
            return name
    
    # Buscar por patrones en nombres de columnas
    for col in df.columns:
        if any(pattern in col.lower() for pattern in ['rating', 'vote', 'score']):
            return col
    
    return None

# T√≠tulo de la aplicaci√≥n
st.title("üé¨ Recomendador de Pel√≠culas con Machine Learning")
st.markdown("### Encuentra tu pr√≥xima pel√≠cula favorita con IA")

# Inicializar el recomendador
@st.cache_resource
def get_recommender():
    csv_path = 'tmdb_movies.csv'
    if os.path.exists(csv_path):
        return MovieRecommender(csv_path)
    else:
        st.warning("El archivo CSV 'tmdb_movies.csv' no existe. Usando datos de ejemplo.")
        return MovieRecommender()

# Cargar/subir archivos CSV
with st.sidebar:
    st.header("Configuraci√≥n")
    uploaded_file = st.file_uploader("Sube un archivo CSV", type=["csv"])

# Variable para el recomendador
if uploaded_file is not None:
    # Guardar el archivo subido en la carpeta actual
    with open("tmdb_movies.csv", "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success("¬°Archivo subido correctamente!")
    
    # Reiniciar el recomendador con el nuevo CSV
    try:
        recommender = MovieRecommender("tmdb_movies.csv")
        st.success(f"CSV procesado: {len(recommender.movies_df)} pel√≠culas cargadas")
    except Exception as e:
        st.error(f"Error al procesar el CSV: {e}")
        recommender = get_recommender()
else:
    recommender = get_recommender()

# Sidebar para navegaci√≥n
st.sidebar.title("Navegaci√≥n")
page = st.sidebar.radio(
    "Selecciona una opci√≥n:",
    ["Inicio", "Recomendaci√≥n por Pel√≠cula", "Recomendaci√≥n por Categor√≠a", 
     "Recomendaci√≥n por Plataforma", "Visualizaciones", "Ver Datos"]
)

# P√°gina de inicio
if page == "Inicio":
    st.markdown("""
    ## Bienvenido al Recomendador de Pel√≠culas con Machine Learning
    
    Este sistema utiliza t√©cnicas avanzadas de procesamiento de lenguaje natural y aprendizaje autom√°tico 
    para recomendarte pel√≠culas basadas en tus preferencias.
    
    ### Caracter√≠sticas principales:
    
    - **Recomendaci√≥n basada en pel√≠culas similares**: Encuentra pel√≠culas parecidas a tus favoritas
    - **Filtrado por categor√≠as**: Descubre las mejores pel√≠culas de tu g√©nero preferido
    - **Filtrado por plataformas**: Encuentra qu√© ver en tus servicios de streaming
    - **Visualizaciones**: Explora la distribuci√≥n de pel√≠culas por categor√≠a y plataforma
    - **Carga de datos CSV**: Puedes personalizar el sistema con tu propia base de datos de pel√≠culas
    
    Usa el men√∫ de navegaci√≥n para explorar las diferentes funcionalidades.
    """)
    
    # Mostrar algunas estad√≠sticas
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"üìä Total de pel√≠culas: {len(recommender.movies_df)}")
        st.info(f"üè∑Ô∏è Categor√≠as disponibles: {len(recommender.get_all_categories())}")
    with col2:
        st.info(f"üì∫ Plataformas disponibles: {len(recommender.get_all_platforms())}")
        
        # Buscar la columna de rating correcta
        rating_col = find_rating_column(recommender.movies_df)
        if rating_col:
            avg_rating = recommender.movies_df[rating_col].mean()
            st.info(f"‚≠ê Calificaci√≥n promedio: {avg_rating:.1f}/10")
        else:
            st.info("‚≠ê Informaci√≥n de calificaci√≥n no disponible")

# P√°gina de recomendaci√≥n por pel√≠cula
elif page == "Recomendaci√≥n por Pel√≠cula":
    st.header("Recomendaci√≥n basada en una pel√≠cula")
    st.markdown("Selecciona una pel√≠cula que te guste y te recomendaremos pel√≠culas similares.")
    
    # Verificar que hay pel√≠culas disponibles
    if len(recommender.movies_df) == 0:
        st.error("No hay pel√≠culas disponibles. Por favor, carga un archivo CSV.")
    else:
        # Selector de pel√≠cula
        movie_title = st.selectbox(
            "Selecciona una pel√≠cula:",
            options=recommender.movies_df['title'].tolist()
        )
        
        # N√∫mero de recomendaciones
        num_recommendations = st.slider("N√∫mero de recomendaciones", 1, 10, 5)
        
        if st.button("Obtener Recomendaciones"):
            # Obtener recomendaciones
            recommendations = recommender.get_movie_recommendations(movie_title, num_recommendations)
            
            if recommendations.empty:
                st.error("No se pudieron encontrar recomendaciones para esta pel√≠cula.")
            else:
                # Mostrar la pel√≠cula seleccionada
                st.subheader("Pel√≠cula seleccionada:")
                selected_movie = recommender.movies_df[recommender.movies_df['title'] == movie_title].iloc[0]
                
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.image("https://via.placeholder.com/300x450?text=Poster+Pelicula", caption=selected_movie['title'])
                with col2:
                    st.markdown(f"**T√≠tulo:** {selected_movie['title']}")
                    st.markdown(f"**A√±o:** {selected_movie['year']}")
                    
                    # Mostrar categor√≠as de forma segura
                    if isinstance(selected_movie['categories'], list):
                        st.markdown(f"**Categor√≠as:** {', '.join(selected_movie['categories'])}")
                    else:
                        st.markdown(f"**Categor√≠as:** {selected_movie['categories']}")
                    
                    # Mostrar plataformas de forma segura
                    if isinstance(selected_movie['platforms'], list):
                        st.markdown(f"**Plataformas:** {', '.join(selected_movie['platforms'])}")
                    else:
                        st.markdown(f"**Plataformas:** {selected_movie['platforms']}")
                    
                    # Mostrar rating
                    rating_col = find_rating_column(recommender.movies_df)
                    if rating_col:
                        st.markdown(f"**Calificaci√≥n:** {selected_movie[rating_col]}/10")
                    else:
                        st.markdown("**Calificaci√≥n:** No disponible")
                        
                    st.markdown(f"**Descripci√≥n:** {selected_movie['description']}")
                
                # Mostrar recomendaciones
                st.subheader("Pel√≠culas recomendadas:")
                
                # Crear columnas para las recomendaciones
                num_rows = (len(recommendations) + 2) // 3
                for row in range(num_rows):
                    cols = st.columns(3)
                    for col_idx in range(3):
                        movie_idx = row * 3 + col_idx
                        if movie_idx < len(recommendations):
                            movie = recommendations.iloc[movie_idx]
                            with cols[col_idx]:
                                st.image("https://via.placeholder.com/150x225?text=Poster+Pelicula", caption=movie['title'])
                                
                                # Mostrar categor√≠as de forma segura
                                if isinstance(movie['categories'], list):
                                    st.markdown(f"**Categor√≠as:** {', '.join(movie['categories'])}")
                                else:
                                    st.markdown(f"**Categor√≠as:** {movie['categories']}")
                                
                                # Mostrar plataformas de forma segura
                                if isinstance(movie['platforms'], list):
                                    st.markdown(f"**Plataformas:** {', '.join(movie['platforms'])}")
                                else:
                                    st.markdown(f"**Plataformas:** {movie['platforms']}")
                                
                                # Mostrar rating
                                rating_col = find_rating_column(recommender.movies_df)
                                if rating_col:
                                    st.markdown(f"**Calificaci√≥n:** {movie[rating_col]}/10")
                                else:
                                    st.markdown("**Calificaci√≥n:** No disponible")

# P√°gina de recomendaci√≥n por categor√≠a
elif page == "Recomendaci√≥n por Categor√≠a":
    st.header("Recomendaci√≥n por Categor√≠a")
    st.markdown("Encuentra las mejores pel√≠culas de tu g√©nero favorito.")
    
    # Obtener categor√≠as disponibles
    categories = recommender.get_all_categories()
    
    if not categories:
        st.error("No hay categor√≠as disponibles.")
    else:
        # Selector de categor√≠a
        category = st.selectbox(
            "Selecciona una categor√≠a:",
            options=categories
        )
        
        # N√∫mero de recomendaciones
        num_recommendations = st.slider("N√∫mero de recomendaciones", 1, 10, 5)
        
        # Bot√≥n para buscar pel√≠culas
        if st.button("Buscar Pel√≠culas"):
            # Obtener recomendaciones por categor√≠a
            category_recommendations = recommender.get_recommendations_by_category(category, num_recommendations)
            
            if category_recommendations.empty:
                st.error(f"No se encontraron pel√≠culas para la categor√≠a '{category}'.")
            else:
                # Mostrar recomendaciones
                st.subheader(f"Mejores pel√≠culas de {category}:")
                
                for _, movie in category_recommendations.iterrows():
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.image("https://via.placeholder.com/150x225?text=Poster+Pelicula", caption=movie['title'])
                    with col2:
                        st.markdown(f"**T√≠tulo:** {movie['title']}")
                        st.markdown(f"**A√±o:** {movie['year']}")
                        
                        # Mostrar categor√≠as de forma segura
                        if isinstance(movie['categories'], list):
                            st.markdown(f"**Categor√≠as:** {', '.join(movie['categories'])}")
                        else:
                            st.markdown(f"**Categor√≠as:** {movie['categories']}")
                        
                        # Mostrar plataformas de forma segura
                        if isinstance(movie['platforms'], list):
                            st.markdown(f"**Plataformas:** {', '.join(movie['platforms'])}")
                        else:
                            st.markdown(f"**Plataformas:** {movie['platforms']}")
                        
                        # Mostrar rating
                        rating_col = find_rating_column(recommender.movies_df)
                        if rating_col:
                            st.markdown(f"**Calificaci√≥n:** {movie[rating_col]}/10")
                        else:
                            st.markdown("**Calificaci√≥n:** No disponible")
                            
                        st.markdown(f"**Descripci√≥n:** {movie['description']}")
                    st.markdown("---")

# P√°gina de recomendaci√≥n por plataforma
elif page == "Recomendaci√≥n por Plataforma":
    st.header("Recomendaci√≥n por Plataforma")
    st.markdown("Descubre qu√© ver en tus servicios de streaming favoritos.")
